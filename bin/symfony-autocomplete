#!/usr/bin/env php
<?php

use Symfony\Component\Console\Application as BaseApplication;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;

if (is_file($autoload = getcwd() . '/vendor/autoload.php')) {
    require $autoload;
} elseif (is_file($autoload = getcwd() . '/../../autoload.php')) {
    require $autoload;
} elseif (is_file($autoload = __DIR__ . '/../vendor/autoload.php')) {
    require($autoload);
} elseif (is_file($autoload = __DIR__ . '/../../../autoload.php')) {
    require($autoload);
} else {
    fwrite(STDERR, "Couln't find autoload");
    exit(1);
}

class Application extends BaseApplication
{
    private $command;

    public function __construct(Command $command)
    {
        $this->command = $command;

        parent::__construct();
    }

    protected function getCommandName(InputInterface $input)
    {
        return $this->command->getName();
    }

    protected function getDefaultCommands()
    {
        $defaultCommands = parent::getDefaultCommands();
        $defaultCommands[] = $this->command;

        return $defaultCommands;
    }

    public function getDefinition()
    {
        $inputDefinition = parent::getDefinition();
        $inputDefinition->setArguments();

        return $inputDefinition;
    }
}

$command = new Command('dump');
$command
    ->setDefinition(array(
        new InputArgument('script', InputArgument::OPTIONAL, "The script to generate completion for."),
        new InputOption('script-options', null, InputOption::VALUE_REQUIRED, "Options to be passed to the script."),
        new InputOption('aliases', null, InputOption::VALUE_REQUIRED),
    ))
    ->setDescription('Dumps bash autocompletion for any executable based on a Symfony Console Application.')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $dump = array();
        $script = $input->getArgument('script');

        if (!$script) {
            $tools = array(
                'console',
                'composer',
                'php-cs-fixer',
                'phpspec',
                'behat',
            );

            if ($extraTools = $input->getOption('aliases')) {
                $extraTools = array_filter(preg_split('/\s+/', $extraTools));
                $tools = array_unique(array_merge($tools, $extraTools));
            }

            $tools = array_map(function($v) { return 'complete -o default -F _symfony '.$v; }, $tools);

            $template = file_get_contents(__DIR__.'/../templates/default.bash.tpl');
            $output->write(str_replace(
                array('%%TOOLS%%'),
                array(implode("\n", $tools)),
                $template
            ));

            return;
        }

        $scriptOptions = $input->getOption('script-options');

        // find all commands
        $process = new Process($script.' '.$scriptOptions.' list --raw | sed -E "s/([^ ]+) .*/\1/"');
        $process->run();
        if (!$process->isSuccessful()) {
            throw new RuntimeException($process->getErrorOutput());
        }

        $commands = explode("\n", $process->getOutput());
        array_pop($commands);

        foreach ($commands as $command) {
            // get command help as xml
            $process = new Process($script.' '.$scriptOptions.' help --format=xml '.$command);
            $process->run();
            if (!$process->isSuccessful()) {
                throw new RuntimeException($process->getErrorOutput());
            }
            $xmlHelp = $process->getOutput();

            // extract options from xml help
            $options = array();
            $xml = simplexml_load_string($xmlHelp);
            foreach ($xml->xpath('/command/options/option') as $option) {
                $options[] = (string) $option['name'];
            }

            $dump[$command] = $options;
        }

        // extract options shared between all commands
        $commonOptions = array();
        foreach ($dump as $command => $options) {
            if (empty($commonOptions)) {
                $commonOptions = $options;
            }

            $commonOptions = array_intersect($commonOptions, $options);
        }

        $dump = array_map(function($options) use ($commonOptions) {
            return array_diff($options, $commonOptions);
        }, $dump);

        // generate the switch content
        $switchCase = <<<SWITCHCASE
    %%COMMAND%%)
            opts="\${opts} %%COMMAND_OPTIONS%%"
            ;;
SWITCHCASE;
        $switchContent = '';
        foreach ($dump as $command => $options) {
            if (empty($options)) {
                continue;
            }

            $switchContent .= str_replace(
                array('%%COMMAND%%', '%%COMMAND_OPTIONS%%'),
                array($command, join(' ', $options)),
                $switchCase
            );
        }

        // dump
        $template = file_get_contents(__DIR__.'/../templates/cached.bash.tpl');
        $script = explode('/', $script);

        $output->write(str_replace(
            array('%%SCRIPT%%', '%%COMMANDS%%', '%%SHARED_OPTIONS%%', '%%SWITCH_CONTENT%%'),
            array(array_pop($script), join(' ', $commands), join(' ', $commonOptions), $switchContent),
            $template
        ));
    })
;

$console = new Application($command);
$console->run();
